


						Bean with scopes :
						====================

----------------------------------------------------------------------------------------------------------
1. Tyre.java(bean)
---------------------
package com.pradip.beanscope;

public class Tyre {
	String brandName;
	int price;
	
	public Tyre() {}
	
	public Tyre(String brandName, int price) {
		super();
		this.brandName = brandName;
		this.price = price;
	}
	public String getBrandName() {
		return brandName;
	}
	public void setBrandName(String brandName) {
		this.brandName = brandName;
	}
	public int getPrice() {
		return price;
	}
	public void setPrice(int price) {
		this.price = price;
	}
	
	@Override
	public String toString() {
		return "Tyre [brandName=" + brandName + ", price=" + price + "]";
	}
}


----------------------------------------------------------------------------------------------------------
2. PrintData.java(main)
-----------------------

package com.pradip.beanscope;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class PrintData {
	public static void main(String a[]) {
		ApplicationContext context=new ClassPathXmlApplicationContext("general.xml");
		
		System.out.println("\n\n ** Bean Scope Example ** ");
		System.out.println("\n\n ** Singleton scope Example ** \n\n");	
		Tyre singletonScope=(Tyre) context.getBean("singletonscope");
		Tyre singletonScope1=(Tyre) context.getBean("singletonscope");
		System.out.println(singletonScope.toString());
		System.out.println(singletonScope1.toString());
		System.out.println("NOTE : Every bean have by default singleton scope.");
		System.out.println("NOTE : when we make object first time then container store that object .");
		System.out.println("NOTE : Now we make second time same class object then it not generate new object it return stored oject.");
		System.out.println("NOTE : If we check all objects hascode then all objects have a same hascode.");
		System.out.println("\nFirst object hascode  : "+singletonScope.hashCode());
		System.out.println("Second object hascode : "+singletonScope1.hashCode());
		
		System.out.println("\n\n ** Prototype scope Example ** \n\n");	
		Tyre protypeScope=(Tyre) context.getBean("prototypescope");
		Tyre protypeScope1=(Tyre) context.getBean("prototypescope");
		System.out.println(protypeScope.toString());
		System.out.println(protypeScope1.toString());
		System.out.println("NOTE : Prototype scope is create new object everytime.");
		System.out.println("NOTE : If we check all objects hascode then all objects have a different hascode.");
		System.out.println("\nFirst object hascode  : "+protypeScope.hashCode());
		System.out.println("Second object hascode : "+protypeScope1.hashCode());
		
	}
}





----------------------------------------------------------------------------------------------------------
3. general.xml :
-------------------

<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-4.0.xsd">

	
	<!-- Below for beanscope package -->
	<bean id="singletonscope" class="com.pradip.beanscope.Tyre" scope="singleton">
		<property name="brandName" value="MRF" />
		<property name="price" value="9000" />
	</bean>
		<bean id="prototypescope" class="com.pradip.beanscope.Tyre" scope="prototype">
		<property name="brandName" value="MRF" />
		<property name="price" value="9000" />
	</bean>

	
</beans>	
=========================================================================================================
4. OutPut
==========================================================================================================


 ** Bean Scope Example ** 


 ** Singleton scope Example ** 


Tyre [brandName=MRF, price=9000]
Tyre [brandName=MRF, price=9000]
NOTE : Every bean have by default singleton scope.
NOTE : when we make object first time then container store that object .
NOTE : Now we make second time same class object then it not generate new object it return stored oject.
NOTE : If we check all objects hascode then all objects have a same hascode.

First object hascode  : 1978869058
Second object hascode : 1978869058


 ** Prototype scope Example ** 


Tyre [brandName=MRF, price=9000]
Tyre [brandName=MRF, price=9000]
NOTE : Prototype scope is create new object everytime.
NOTE : If we check all objects hascode then all objects have a different hascode.

First object hascode  : 2131952342
Second object hascode : 1139700454

